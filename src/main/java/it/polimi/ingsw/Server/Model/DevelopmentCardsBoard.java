/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package it.polimi.ingsw.server.model;

import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import java.time.*;
import com.fasterxml.jackson.dataformat.xml.xmlMapper;

import GamePackage.Game;
import jdk.internal.org.objectweb.asm.TypeReference;

public class DevelopmentCardsBoard {

    private DevelopmentCard ;

    private Game ;

    private DevelopmentCardsDeck board[][] = new DevelopmentCardsDeck[4][3];

    public DevelopmentCard get() {
        return ;
    }

    public Game get() {
        return ;
    }

    public Set<DevelopmentCardsDeck> getBoard[4][3]() {
        return board[4][3];
    }

    public void set(DevelopmentCard ) {
        this. = ;
    }

    public void set(Game ) {
        this. = ;
    }

    public void link(DevelopmentCard _) {
        if (_ != null) {
            _.unlink();
            _.set(this);
        }

        unlink();
        set(_);
    }

    public void linkBoard[4][3](DevelopmentCardsDeck _board[4][3]) {
        if (_board[4][3] != null) {
            _board[4][3].unlink();
            _board[4][3].set(this);
            getBoard[4][3]().add(_board[4][3]);
        }
    }

    public void unlink() {
        if (get() != null) {
            get().set(null);
            set(null);
        }
    }

    public void unlinkBoard[4][3](DevelopmentCardsDeck _board[4][3]) {
        if (_board[4][3] != null) {
            _board[4][3].set(null);
            getBoard[4][3]().remove(_board[4][3]);
        }
    }

    public void unlinkBoard[4][3](DevelopmentCardsDeck _board[4][3], Iterator<DevelopmentCardsDeck> it) {
        if (_board[4][3] != null) {
            _board[4][3].set(null);
            it.remove();
        }
    }

    /**
    * @param level 
    * @param color
    */


    public DevelopmentCard pick(Level level, Color color) {
        private int line = new int;
        private int column = new int;
        switch (level) {
            case "LEVEL1":
                line = 2;
                break;
            case "LEVEL2":
                line = 1;
                break;
            case "LEVEL3":
                line = 0;
                break;
        }
        switch (color) {
            case "GREEN":
                column = 0;
                break;
            case "BLUE":
                column = 1;
                break;
            case "YELLOW":
                column = 2;
                break;
            case "PURPLE":
                column = 3;
                break;
        }
        return board[line][column].pop();
    }
    /**
    * Loads the cards from an XML file and creates the related objects.
     * Then it creates all the needed decks by calling the constructor and passing them the cards they need.
    */


    private void loadDevelopmentCards() {
        private DevelopmentCard dc = new DevelopmentCard();
        try {
            ObjectMapper mapper = new XmlMapper();
            InputStream inputStream = new FileInputStream(new File("/poszionedelfilexml")); //METTERRE LA POSIZIONE DEL FILE GIUSTA
            TypeReference<List<DevelopmentCard>> typeReference = new TypeReference<List<DevelopmentCard>>() {};
            List<DevelopmentCard> developmentCards = mapper.readValue(inputStream, typeReference);
            for(DevelopmentCards d: developmentCards){
                switch(d.getLevel()) {
                    case "LEVEL1":
                        switch(d.getType()) {
                            case "GREEN":
                                board[2][0].push(d);
                                break;
                            case "BLUE":
                                board[2][1].push(d);
                                break;
                            case "YELLOW":
                                board[2][2].push(d);
                                break;
                            case "PURPLE":
                                board[2][3].push(d);
                                break;
                        }
                    break;

                    case "LEVEL2":
                        switch(d.getType()) {
                            case "GREEN":
                                board[1][0].push(d);
                                break;
                            case "BLUE":
                                board[1][1].push(d);
                                break;
                            case "YELLOW":
                                board[1][2].push(d);
                                break;
                            case "PURPLE":
                                board[1][3].push(d);
                                break;
                        }
                    break;

                    case "LEVEL3":
                        switch(d.getType()) {
                            case "GREEN":
                                board[0][0].push(d);
                                break;
                            case "BLUE":
                                board[0][1].push(d);
                                break;
                            case "YELLOW":
                                board[0][2].push(d);
                                break;
                            case "PURPLE":
                                board[0][3].push(d);
                                break;
                        }
                    break;
                }
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    /**
    * @param level 
    * @param color
    */


    public DevelopmentCard peek(Level level, Color color) {
        private int line = new int;
        private int column = new int;
        switch (level) {
            case "LEVEL1":
                line = 2;
                break;
            case "LEVEL2":
                line = 1;
                break;
            case "LEVEL3":
                line = 0;
                break;
        }
        switch (color) {
            case "GREEN":
                column = 0;
                break;
            case "BLUE":
                column = 1;
                break;
            case "YELLOW":
                column = 2;
                break;
            case "PURPLE":
                column = 3;
                break;
        }
        return board[line][column].peek();

    }

    public DevelopmentCardsDeck[][] peekBoard() {
        return board;
    }
    /**
    * @param color
    */


    public void discardTwo(Color color) {
        switch (color) {
            case "GREEN":
                if (board[3][0].empty()){
                    if (board[2][0].empty()){
                        if (board[1][0].empty()){
                            board[0][0].pop();
                            board[0][0].pop();
                        }
                        else{
                            board[1][0].pop();
                            if (board[1][0].empty()){
                                board[0][0].pop();
                            }
                            else{
                                board[1][0].pop();
                            }
                        }
                    }
                    else{
                        board[2][0].pop();
                        if (board[2][0].empty()){
                            if (board[1][0].empty()){
                                board[0][0].pop();
                            }
                            else board[1][0].pop();
                        }
                        else{
                            board[2][0].pop();
                        }
                    }
                }
                else {
                    board[3][0].pop();
                    if(board[3][0].empty()){
                        if(board[2][0].empty()){
                            if(board[1][0].empty()){
                                board[0][0].pop();
                            }
                            else board[1][0].pop();
                        }
                        else board[2][0].pop();
                    }
                    else board[3][0].pop();
                }
                break;
            case "BLUE":
                if (board[3][1].empty()){
                    if (board[2][1].empty()){
                        if (board[1][1].empty()){
                            board[0][1].pop();
                            board[0][1.pop();
                        }
                        else{
                            board[1][1].pop();
                            if (board[1][1].empty()){
                                board[0][1].pop();
                            }
                            else{
                                board[1][1].pop();
                            }
                        }
                    }
                    else{
                        board[2][1].pop();
                        if (board[2][1].empty()){
                            if (board[1][1].empty()){
                                board[0][1].pop();
                            }
                            else board[1][1].pop();
                        }
                        else{
                            board[2][1].pop();
                        }
                    }
                }
                else {
                    board[3][1].pop();
                    if(board[3][1].empty()){
                        if(board[2][1].empty()){
                            if(board[1][1].empty()){
                                board[0][1].pop();
                            }
                            else board[1][1].pop();
                        }
                        else board[2][1].pop();
                    }
                    else board[3][1].pop();
                }
                break;
            case "YELLOW":
                if (board[3][2].empty()){
                    if (board[2][2].empty()){
                        if (board[1][2].empty()){
                            board[0][2].pop();
                            board[0][2].pop();
                        }
                        else{
                            board[1][2].pop();
                            if (board[1][2].empty()){
                                board[0][2].pop();
                            }
                            else{
                                board[1][2].pop();
                            }
                        }
                    }
                    else{
                        board[2][2].pop();
                        if (board[2][2].empty()){
                            if (board[1][2].empty()){
                                board[0][2].pop();
                            }
                            else board[1][2].pop();
                        }
                        else{
                            board[2][2].pop();
                        }
                    }
                }
                else {
                    board[3][2].pop();
                    if(board[3][2].empty()){
                        if(board[2][2].empty()){
                            if(board[1][2].empty()){
                                board[0][2].pop();
                            }
                            else board[1][2].pop();
                        }
                        else board[2][2].pop();
                    }
                    else board[3][2].pop();
                }
                break;
            case "PURPLE":
                if (board[3][3].empty()){
                    if (board[2][3].empty()){
                        if (board[1][3].empty()){
                            board[0][3].pop();
                            board[0][3].pop();
                        }
                        else{
                            board[1][3.pop();
                            if (board[1][3].empty()){
                                board[0][3].pop();
                            }
                            else{
                                board[1][3].pop();
                            }
                        }
                    }
                    else{
                        board[2][3].pop();
                        if (board[2][3].empty()){
                            if (board[1][3].empty()){
                                board[0][3].pop();
                            }
                            else board[1][3].pop();
                        }
                        else{
                            board[2][3].pop();
                        }
                    }
                }
                else {
                    board[3][3].pop();
                    if(board[3][3].empty()){
                        if(board[2][3].empty()){
                            if(board[1][3].empty()){
                                board[0][3].pop();
                            }
                            else board[1][3.pop();
                        }
                        else board[2][3].pop();
                    }
                    else board[3][3].pop();
                }
                break;
        }
    }

}