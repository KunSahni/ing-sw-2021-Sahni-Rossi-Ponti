/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package Model;

import java.util.*;
import java.time.*;


import GamePackage.Game;
// ----------- << imports@AAAAAAF4NovSY28fwOM= >>
// ----------- >>

// ----------- << class.annotations@AAAAAAF4NovSY28fwOM= >>
// ----------- >>
public class DevelopmentCardsBoard {
    // ----------- << attribute.annotations@AAAAAAF4NppTOnosivg= >>
    // ----------- >>
    private DevelopmentCard ;

    // ----------- << attribute.annotations@AAAAAAF4N/jwar3NmJE= >>
    // ----------- >>
    private Game ;

    // ----------- << attribute.annotations@AAAAAAF4N/ia5rjOmHg= >>
    // ----------- >>
    private Set<DevelopmentCardsDeck> board[4][3] = new HashSet<>();

    public DevelopmentCard get() {
        return ;
    }

    public Game get() {
        return ;
    }

    public Set<DevelopmentCardsDeck> getBoard[4][3]() {
        return board[4][3];
    }

    public void set(DevelopmentCard ) {
        this. = ;
    }

    public void set(Game ) {
        this. = ;
    }

    public void link(DevelopmentCard _) {
        if (_ != null) {
            _.unlink();
            _.set(this);
        }

        unlink();
        set(_);
    }

    public void linkBoard[4][3](DevelopmentCardsDeck _board[4][3]) {
        if (_board[4][3] != null) {
            _board[4][3].unlink();
            _board[4][3].set(this);
            getBoard[4][3]().add(_board[4][3]);
        }
    }

    public void unlink() {
        if (get() != null) {
            get().set(null);
            set(null);
        }
    }

    public void unlinkBoard[4][3](DevelopmentCardsDeck _board[4][3]) {
        if (_board[4][3] != null) {
            _board[4][3].set(null);
            getBoard[4][3]().remove(_board[4][3]);
        }
    }

    public void unlinkBoard[4][3](DevelopmentCardsDeck _board[4][3], Iterator<DevelopmentCardsDeck> it) {
        if (_board[4][3] != null) {
            _board[4][3].set(null);
            it.remove();
        }
    }

    /**
    * @param level 
    * @param color
    */

    // ----------- << method.annotations@AAAAAAF4ODZRwRIIAYo= >>
    // ----------- >>
    public DevelopmentCard pick(Level level, Color color) {
    // ----------- << method.body@AAAAAAF4ODZRwRIIAYo= >>
    // ----------- >>
    }
    /**
    * Loads the cards from an XML file and creates the related objects. Then it creates all the needed decks by calling the constructor and passing them the cards they need.
    */

    // ----------- << method.annotations@AAAAAAF4O2AMpoj4OFk= >>
    // ----------- >>
    private void loadDevelopmentCards() {
    // ----------- << method.body@AAAAAAF4O2AMpoj4OFk= >>
    // ----------- >>
    }
    /**
    * @param level 
    * @param color
    */

    // ----------- << method.annotations@AAAAAAF4QLyAYnRUhDQ= >>
    // ----------- >>
    public DevelopmentCard peek(Level level, Color color) {
    // ----------- << method.body@AAAAAAF4QLyAYnRUhDQ= >>
    // ----------- >>
    }
    // ----------- << method.annotations@AAAAAAF4QLyRDHaylDc= >>
    // ----------- >>
    public List<List<DevelopmentCard>> peekBoard() {
    // ----------- << method.body@AAAAAAF4QLyRDHaylDc= >>
    // ----------- >>
    }
    /**
    * @param color
    */

    // ----------- << method.annotations@AAAAAAF4RH9tH61fT9Q= >>
    // ----------- >>
    public void discardTwo(Color color) {
    // ----------- << method.body@AAAAAAF4RH9tH61fT9Q= >>
    // ----------- >>
    }
// ----------- << class.extras@AAAAAAF4NovSY28fwOM= >>
// ----------- >>
}